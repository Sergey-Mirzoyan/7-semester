using RandomAnalyzer;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows.Forms;

namespace lab1
{
    public partial class fmLab1 : Form
    {
        private readonly RandomSequenceGenerator rsg = new RandomSequenceGenerator();

        #region Autogenerated

        public fmLab1()
        {
            InitializeComponent();
        }

        private void btnCalculate_Click(object sender, EventArgs e)
        {
            var numbers = ParseString(tbSeq.Text, new char[] { ' ' });
            double entropy = EntropyCaclulator.CalculateEntropy(numbers);
            double differenceEntropy = EntropyCaclulator.CaclulateDifferenceEntropy(numbers);

            lbEntropy.Text = entropy.ToString();
            lbDiffEntropy.Text = differenceEntropy.ToString();
        }

        private void btnGenerate_Click(object sender, EventArgs e)
        {
            var numbers = rsg.GetSequence((int)nudMin.Value, (int)nudMax.Value, (int)nudCount.Value);
            ProcessNumbers(numbers, 3);
        }

        private void fmLab1_Load(object sender, EventArgs e)
        {
            foreach (DataGridViewColumn column in dgvData.Columns)
                column.SortMode = DataGridViewColumnSortMode.NotSortable;

            ProcessFile("1.txt", 0);
            ProcessFile("12.txt", 1);
            ProcessFile("123.txt", 2);
        }

        #endregion

        #region Additional Code

        private void CleanColumn(int ind)
        {
            if (ind < 0 || ind >= dgvData.ColumnCount)
                throw new ArgumentOutOfRangeException("ind");

            for (int i = 0; i < dgvData.RowCount; ++i)
                dgvData[ind, i].Value = "";
        }

        private void RequireRows(int count)
        {
            if (dgvData.RowCount < count)
                dgvData.RowCount = count;
        }

        private void ProcessNumbers(IList<int> numbers, int ind)
        {
            if (ind < 0 || ind >= dgvData.ColumnCount)
                throw new ArgumentOutOfRangeException("ind");

            CleanColumn(ind);
            RequireRows(numbers.Count + 3);

            for (int i = 0; i < numbers.Count; ++i)
                dgvData[ind, i].Value = numbers[i].ToString();

            double entropy = EntropyCaclulator.CalculateEntropy(numbers);
            double differenceEntropy = EntropyCaclulator.CaclulateDifferenceEntropy(numbers);

            dgvData[ind, numbers.Count].Value = entropy.ToString();
            dgvData[ind, numbers.Count + 1].Value = differenceEntropy.ToString();
        }

        private void ProcessFile(string filename, int ind)
        {
            var str = File.ReadAllText(filename);
            var src = ParseString(str, Environment.NewLine.ToCharArray());
            ProcessNumbers(src, ind);
        }

        private static IList<int> ParseString(string stringSource, char[] separators)
        {
            if (stringSource == null)
                throw new ArgumentNullException("src");
            if (separators == null)
                throw new ArgumentNullException("separators");
            if (separators.Length == 0)
                throw new ArgumentException("separators");

            var sources = stringSource.Split(separators);
            var list = new List<int>(sources.Length);
            foreach (var src in sources)
            {
                int temp;
                if (int.TryParse(src, out temp))
                    list.Add(temp);
            }
            return list;
        }

        #endregion

        private void dgvData_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
